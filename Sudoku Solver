sudoku = [
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]


def print_board(board):
    num = -1
    for i in range(len(board)):
        num += 1
        if num % 3 == 0 and num != 0:
            print("- - - - - - - - - - - -")
        num2 = -1
        for j in range(len(board[i])):
            num2 += 1
            if num2 % 3 == 0 and num2 != 0:
                print(" | ", end="")

            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")


def empty_spot(board):
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] == 0:
                return i, j
    return None


def is_okay(board, num, position):
    for i in range(len(board[0])):
        if board[position[0]][i] == num and position[1] != i:
            return False
        else:
            return True
    for i in range(len(board)):
        if board[i][position[1]] == num and position[0] != i:
            return False
        else:
            return True

    square_x = (position[1] // 3) * 3
    square_y = (position[0] // 3) * 3

    for i in range(square_y, square_y + 3):
        for j in range(square_x, square_x + 3):
            if board[i][j] == num and (i, j) != position:
                return False
            else:
                return True


def solve(board):
    if not empty_spot(board):
        return True
    else:
        (x, y) = empty_spot(board)

    for i in range(1, 10):
        if is_okay(board, i, (x, y)):
            board[x][y] = i
            if solve(board):
                return True
            board[x][y] = 0
    return False


solve(sudoku)
print_board(sudoku)
